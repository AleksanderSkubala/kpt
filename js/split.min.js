var clean = function (node)
{
  for(var n = 0; n < node.childNodes.length; n ++)
  {
    var child = node.childNodes[n];

    if
    (
      child.nodeType === 8
      ||
      (child.nodeType === 3 && !/\S/.test(child.nodeValue))
    )
    {
      node.removeChild(child);
      n --;
    }
    else if(child.nodeType === 1)
    {
      clean(child);
    }
  }
};

var concat = function (node) {
    var children = node.childNodes;
    var child;
    var final = [];
    for (let i = 0; i < children.length; i++) {
        child = children[i];
        if(child.childNodes.length > 1) {
            if(child.nodeName === 'TR') {
                final.push(child);
            }
            else {
                final = final.concat(concat(child));
            }
        } else {
            final.push(child);
        }
    }
    return final;
};

var reverse = function (n) {
    var kids = n.childNodes;
    var numkids = kids.length;
    for(var i = numkids-1; i >= 0; i--) {
        var c = n.removeChild(kids[i]);
        n.appendChild(c);
    }
}

var split = function() {
    clean(document.body);

    var pages = document.querySelectorAll('.page');
    if(!pages) {
        console.error('There is no pages!');
        return;
    }

    var page;
    var rest;
    var children;
    var children2;
    var child;
    var child2;
    var finalChild;
    var container;
    var fragment = document.createDocumentFragment();
    var newPage;

    var thead;

    for (let index = 0; index < pages.length; index++) {
        page = pages[index];
        if(page.clientHeight > 1030) {
            rest = page.clientHeight - 1030;
            children = page.childNodes;
            for (let i = 1; i < children.length; i++) {
                child = children[children.length - i]; //elements are checking from end
                container = child.cloneNode(false);
                children2 = concat(child);
                if(children2.length > 0) {
                    for (let i2 = 1; i2 <= children2.length; i2++) {
                    child2 = children2[children2.length - i2];

                        rest -= child2.offsetHeight ? child2.offsetHeight : 0
                        container.appendChild(child2); //the order is the most important

                        if(rest <= child2.offsetHeight) break;
                    }
                    reverse(container);

                    if(container.getAttribute('id') === 'todo') {
                        thead = document.querySelector('#todoHead').cloneNode(true);
                        container.insertBefore(thead, container.childNodes[0]);
                    }

                    finalChild = container;
                    fragment.appendChild(finalChild);

                    if(rest <= child2.offsetHeight) break;
                }
            }
            reverse(fragment);
            page.style.marginBottom = `${1000 - page.clientHeight + 40}px`;
            newPage = pages[0].cloneNode(false);
            newPage.appendChild(fragment);
            pages[0].parentNode.appendChild(newPage);
        }
    }
};